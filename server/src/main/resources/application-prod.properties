server.port=8090

######################## 数据库访问配置 ########################
spring.datasource.druid.url=jdbc:mysql://localhost:3306/hk_admin?useUnicode=true&characterEncoding=UTF-8&useSSL=false
spring.datasource.druid.username=root
spring.datasource.druid.password=root
#Druid 数据源配置，继承spring.datasource.* 配置，相同则覆盖
# 初始化大小，最小，最大
spring.datasource.druid.initial-size=5
spring.datasource.druid.min-idle=5
spring.datasource.druid.max-active=20
# 配置获取连接等待超时的时间
spring.datasource.druid.max-wait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.time-between-eviction-runs-millis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.min-evictable-idle-time-millis=300000
# 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5下建议关闭。
spring.datasource.druid.pool-prepared-statements=true
# 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题， 可以把这个数值配置大一些，比如说100
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=100
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.druid.filters=stat,wall,slf4j
# 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
spring.datasource.druid.validation-query=SELECT 1 FROM DUAL
# 单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法
spring.datasource.druid.validation-query-timeout=1
# 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.druid.test-on-borrow=true
# 归还连接时执行validationQuery检测连接是否有效，这个配置会降低性能
spring.datasource.druid.test-on-return=false
# 申请连接时执行validationQuery检测连接是否有效，这个配置会降低性能。
spring.datasource.druid.test-while-idle=false


# 文件缓存位置
file.upload.location=e:\\upload\\temp\\
# 所有上传文件根目录
file.upload.root-path=e:\\upload\\file\\
# ueditor配置
ueditor.upload.root-path=e:\\upload\\ueditor\\

# RSA文件路径
rsa.public-key-path=
rsa.private-key-path=